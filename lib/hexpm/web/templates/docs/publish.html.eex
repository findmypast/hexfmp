<h2>
  Publishing a package
</h2>
<p>
  Publishing a package to Hexfmp consists of these steps:

  <ul>
    <li>Registering (if not already done so, go <a href="<%= signup_path(Endpoint, :show) %>">here</a>) a Hex user.</li>
    <li>Authenticating on the command line as that user using <code>hexfmp_auth</code>(go to <a href="<%= docs_path(Endpoint, :fmp) %>">Hexfmp usage</a> to set this command up).</li>
    <li>Adding metadata to the project's <code>mix.exs</code> file</li>
    <li>Submitting the package using <code>hexfmp_publish</code>(go to <a href="<%= docs_path(Endpoint, :fmp) %>">Hexfmp usage</a> to set this command up).</li>
  </ul>
</p>

<h3>Naming</h3>
<p>
  Before publishing, you will have to choose the name of your package. It is the responsibility of the community to pick and encourage good package names. Here are some tips:
</p>

<ul>
  <li>Avoid using offensive or harassing package names, nicknames, or other identifiers that might detract from a friendly, safe, and welcoming environment for all.</li>
  <li>If you are providing functionality on top of an existing package, consider using that package name as a prefix. For example, if you want to add authentication to <a href="https://github.com/elixir-lang/plug">Plug</a>, consider calling your package <code>plug_auth</code> (or <code>plug_somename</code>) instead of <code>auth</code> (or <code>somename</code>).</li>
  <li>Avoid namespace conflicts with existing packages. Plug owns the <code>Plug</code> namespace, if you have an authentication package for Plug use the namespace <code>PlugAuth</code> instead of <code>Plug.Auth</code>.</li>
</ul>

<p>
  With a name in hand, it is time to add the proper metadata to your <code>mix.exs</code> file.
</p>

<h3>Adding metadata to <code>mix.exs</code></h3>

<p>
  The package is configured in the <code>project</code> function in the project's <code>mix.exs</code> file. <a href="#example-mix-exs-file">See below</a> for an example file.
</p>

<p>
  First, make sure that the <code>:version</code> property is correct. All Hex packages are required to follow <a href="http://semver.org/">semantic versioning</a>.
</p>

<p>
  Fill in the <code>:description</code> property. It should be a sentence, or a few sentences, describing the package.
</p>

<p>
  Under the <code>:package</code> property are some additional configuration options:
</p>

<dl class="dl-horizontal">
  <dt><code>:licenses</code></dt>
  <dd>A list of licences the project is licensed under. This attribute is required.</dd>
  <dt><code>:name</code></dt>
  <dd>The name of the package in case you want to publish the package with a different name than the application name.</dd>
  <dt><code>:maintainers</code></dt>
  <dd>A list of names (and/or emails) of maintainers to the project. Optional but highly recommended.</dd>
  <dt><code>:links</code></dt>
  <dd>A map where the key is a link name and the value is the link URL. Optional but highly recommended.</dd>
  <dt><code>:files</code></dt>
  <dd>A list of files and directories to include in the package. Has to include <code>mix.exs</code>. Defaults to standard project directories, so you usually don't need to set this property.</dd>
  <dt><code>:build_tools</code></dt>
  <dd>List of build tools that can build the package. It's very rare that you need to set this, as Hex tries to automatically detect the build tools based on the files in the package. If a "rebar" or "rebar.config" file is present Hex will mark it as able to build with rebar. This detection can be overridden by setting this field.</dd>
<<<<<<< e7caaf13ac644dff18f99d42bcb12739566e0401
<<<<<<< eca7dc11a2f3999bf564f70bf663e85ba7441d14

</dl>

<p>
    To improve the documentation generated by ExDoc, the following fields can also be supplied as part of the <code>project</code> function:
</p>

<dl class="dl-horizontal">
  <dt><code>:source_url</code></dt>
  <dd>An URL to the location where your source code is publicly available. This will be used to link directly to the code of the different modules functions from within the documentation.</dd>
  <dt><code>:homepage_url</code></dt>
  <dd>An URL to the homepage of your application. This will be used to link back to your homepage from within the generated documentation.</dd>
</dl>

 Consult the <a href="https://github.com/elixir-lang/ex_doc#using-exdoc-with-mix">ExDoc documentation</a> for more information on improving the generated documentation.

=======
>>>>>>> updating docs after first demo with human being
=======
<<<<<<< bb2fc6b6ed152eb791eb5d27adee5cac7da43cb6
>>>>>>> updating docs after first demo with human being
</dl>

=======
<<<<<<< c0f0164bb7fe34dfa90babe6e4aecc946b01c169

</dl>

<p>
    To improve the documentation generated by ExDoc, the following fields can also be supplied as part of the <code>project</code> function:
</p>

<dl class="dl-horizontal">
  <dt><code>:source_url</code></dt>
  <dd>An URL to the location where your source code is publicly available. This will be used to link directly to the code of the different modules functions from within the documentation.</dd>
  <dt><code>:homepage_url</code></dt>
  <dd>An URL to the homepage of your application. This will be used to link back to your homepage from within the generated documentation.</dd>
</dl>

 Consult the [ExDoc documentation](https://github.com/elixir-lang/ex_doc#using-exdoc-with-mix) for more information on improving the generated documentation.

=======
</dl>

>>>>>>> updating docs after first demo with human being
>>>>>>> updating docs after first demo with human being
<h4>Dependencies</h4>

<p>
  <h3>--THIS IS SUPER IMPORTANT!--</h3>
  When publishing to the internal repo, your <code>mix.exs</code> file <b>MUST</b> mark external/public dependencies by denoting their repo as <code>:hexpm</code>(the public hex repo), e.g.
  <pre>
    <code class="elixir">
defp deps do
  [
    {:phoenix, "~> 1.3-rc", repo: :hexpm},
    {:phoenix_ecto, "~> 3.1-rc", repo: :hexpm},
    {:some_fmp_package, ">= 0.0.0", repo: :hexfmp},
    {:ex_doc, ">= 0.0.0", only: :dev, repo: :hexpm},
  ]
end
    </code>
  </pre>
  If not set this way, hex will look for those external dependencies in the private repo. This is because child dependencies will always be fetched from the same repository as the parent package, unless explicitly set otherwise.
</p>
<p>
  A dependency defined with no SCM (<code>:git</code> or <code>:path</code>) will be automatically treated as a Hex dependency. Make sure the correct <code>repo:</code> is set for each dependency. See the <a href="/docs/usage">Usage guide</a> for more details.
</p>

<p>
  Only Hex packages will be included as dependencies of the package, for example Git dependencies will not be included. Additionally, only production dependencies will be included, just like how Mix will only fetch production dependencies when fetching the dependencies of your dependencies. Dependencies will be treated as production dependencies when they are defined with no <code>:only</code> property or with <code>only: :prod</code>.
</p>

<a id="example-mix-exs-file"></a>
<h4>Example mix.exs file</h4>

<pre><code class="elixir">defmodule Postgrex.Mixfile do
  use Mix.Project

  def project do
    [app: :postgrex,
     version: "0.1.0",
     elixir: "0.13.0",
     build_embedded: Mix.env == :prod,
     start_permanent: Mix.env == :prod,
     description: description(),
     package: package(),
<<<<<<< e7caaf13ac644dff18f99d42bcb12739566e0401
<<<<<<< eca7dc11a2f3999bf564f70bf663e85ba7441d14
     deps: deps(),
     name: "Postgrex",
     source_url: "https://github.com/ericmj/postgrex"]
=======
     deps: deps()]
=======
<<<<<<< bb2fc6b6ed152eb791eb5d27adee5cac7da43cb6
     deps: deps()]
=======
<<<<<<< c0f0164bb7fe34dfa90babe6e4aecc946b01c169
     deps: deps(),
     name: "Postgrex",
     source_url: "https://github.com/ericmj/postgrex"]
=======
     deps: deps()]
>>>>>>> updating docs after first demo with human being
>>>>>>> updating docs after first demo with human being
>>>>>>> updating docs after first demo with human being
  end

  def application do
    []
  end

  defp deps do
    [{:decimal, "~> 0.2.0", repo: :hexpm},
      {:some_fmp_package, "~> 0.2.0", repo: :hexfmp},
      {:some_other_fmp_package, "~> 0.2.0", repo: :hexfmp},
      {:ex_doc, github: "elixir-lang/ex_doc", repo: :hexpm}]
  end

  defp description do
    """
    A few sentences (a paragraph) describing the project.
    """
  end

  defp package do
    [# These are the default files included in the package
     name: :postgrex,
     files: ["lib", "priv", "mix.exs", "README*", "readme*", "LICENSE*", "license*"],
     maintainers: ["Eric Meadows-Jönsson", "José Valim"],
     licenses: ["Apache 2.0"],
<<<<<<< e7caaf13ac644dff18f99d42bcb12739566e0401
<<<<<<< eca7dc11a2f3999bf564f70bf663e85ba7441d14
=======
<<<<<<< bb2fc6b6ed152eb791eb5d27adee5cac7da43cb6
     links: %{"GitHub" => "https://github.com/ericmj/postgrex",
              "Docs" => "http://ericmj.github.io/postgrex/"}]
=======
<<<<<<< c0f0164bb7fe34dfa90babe6e4aecc946b01c169
>>>>>>> updating docs after first demo with human being
     links: %{"GitHub" => "https://github.com/ericmj/postgrex"]
=======
     links: %{"GitHub" => "https://github.com/ericmj/postgrex",
              "Docs" => "http://ericmj.github.io/postgrex/"}]
>>>>>>> updating docs after first demo with human being
<<<<<<< e7caaf13ac644dff18f99d42bcb12739566e0401
=======
>>>>>>> updating docs after first demo with human being
>>>>>>> updating docs after first demo with human being
  end
end
</code></pre>

<h3>Submitting the package</h3>

<p>
  After the package metadata and dependencies have been added to <code>mix.exs</code>, we are ready to publish the package with the <code>hexfmp_publish</code>(go to <a href="<%= docs_path(Endpoint, :fmp) %>">Hexfmp usage</a> to set this command up) command:
</p>

<pre><code class="nohighlight">$ hexfmp_publish
Publishing postgrex v0.4.0
  Dependencies:
    decimal ~> 0.1.0
  Excluded dependencies (not part of the Hex package):
    ex_doc
  Included files:
    lib/postgrex
    lib/postgrex/binary_utils.ex
    lib/postgrex/connection.ex
    lib/postgrex/protocol.ex
    lib/postgrex/records.ex
    lib/postgrex/types.ex
    mix.exs
Proceed? [Yn] Y
Published postgrex v0.4.0
</code></pre>

<p>
  Congratulations, you've published your package! It will appear on the <a href="http://production.hexfmp.service.consul:3333/">hexfmp</a> site and will be available to add as a dependency in other Mix projects, just make sure it is specified as a package in the hexfmp repo e.g. <code>{:some_fmp_package, "~> 0.2.0", repo: :hexfmp}</code>.
</p>

<p>
  Please test your package after publishing by adding it as dependency to a Mix project and fetching and compiling it. If there are any issues, you can publish the package again with the same version for up to one hour after first publication. After which <code>:version</code> increments must occur between publishes.
</p>

<p>
  When running the command to publish a package, Hex will create a tar file of all the files and directories listed in the <code>:files</code> property. Hex will also recompile the registry file that all clients will update automatically when fetching dependencies.
</p>
